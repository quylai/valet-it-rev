TASKS INDICES

01 
setup to see demo of authentication 

02 
tie it to sequelize

03
deploying to heroku

04
start tying the components, maybe breakdown to more tasks

//=================================================================================
//=================================================================================
TASKS LOGS

----------------------------------------
==TASK-01==
setup to see demo of authentication 

need to do the following on boilerplate in order for it to work:

- in strategies/jwt.js
	change
			'your_jwt_secret'
	to
			process.env.JWTSECRET

- need to generate ".env" file with content:
			JWTSECRET=some-values
	"some-values" is arbitrary; besure to include ".env" in ".gitignore"

- in package.json, change
			"start:prod": "node server.js",
	to
			"start:prod": "node -r esm server.js",
	which allow the use of "esm", those weird arrow function

- don't delete "yarn.lock", this maybe the log to lock-in all version of
	npm used that work with the repo app; maybe this is equivalent to 
	package.lock.json

- errors in VSC terminal:
			Error: listen EADDRINUSE: address already in use :::3001
			Emitted 'error' event at:
			at process._tickCallback (internal/process/next_tick.js:63:19)
	these error may pertain to database connection config, which will be deat
	with in next task

----------------------------------------
==TASK-02==
observe if inputs store in database

- errors in VSC terminal:
			Error: listen EADDRINUSE: address already in use :::3001
			Emitted 'error' event at:
			at process._tickCallback (internal/process/next_tick.js:63:19)
	resolved:
	in server.js, changes
			const PORT = process.env.PORT || 3001;
	to "5000"; also do 5000 for 
			"proxy": "http://localhost:3001/",
	in file client/package.json

- done, yay...

----------------------------------------
==TASK-03==
deploying to heroku

- something odd about UT internet network; unable to latch onto JawsDB via 
	[MySQL-Workbench and SequelPro] on Mac-laptop

----
* mod the following:

	- mod config/config.json with:
				"production": {
					"use_env_variable": "JAWSDB_URL",
					"dialect": "mysql"
				}
	- account for process.env.JWTSECRET by setup its value in 
				heroku/Settings/Config_Vars

	- in package.json (outer one), verify that:
			"heroku-postbuild": "npm run build"

----------------------------------------
==TASK-04==
start tying the components, maybe breakdown to more tasks



//=================================================================================
//=================================================================================
LOGIC ROUTES

Guest path:

- selected "Guest Login"
- modal display, asking login credential, guest login'd

* to dashboard:
	- there are 3-flags: Parked, Paid, InRoute
		> Parked - active when valet parked vehicle
		> Paid - active after guest paid
		> InRoute - active when valet in-process of retrieving vehicle
	- Pay button - takes to screen for for payment information
	- PickUp button - alert valet to retrieve vehicle, then insert wait-time
		info near bottom of dashboard
	
----------------------------------------
Valet path:

- selected "Valet Driver"
- display screen request badge#; assuming badge ids alreay in database
- to screen for registering guest information (first and last); 
	buttons: LogGuest and Queue

- LogGuest -> inputs for vehicle information; 
	button: Parked -> registering guest screen

- Queue - screen contain guests requested for vehicle; each vehicle with info:
	number-placed-queue, parking-spot-number, licence-plate, color/make/model; 
	buttons: Home and InRoute

- Home button -> registering guest screen
- InRoute button -> after selecting vehicle on queue, clicking button will display
	vehicle information on a separate screen, with button Arrived;  
	Arrived button loop back to registering guest screen




