TASKS INDICES

01 
setup to see demo of authentication 

02 
tie it to sequelize

03
deploying to heroku

04
start tying the components, maybe breakdown to more tasks

//=================================================================================
//=================================================================================
TASKS LOGS

----------------------------------------
==TASK-01==
setup to see demo of authentication 

need to do the following on boilerplate in order for it to work:

- in strategies/jwt.js
	change
			'your_jwt_secret'
	to
			process.env.JWTSECRET

- need to generate ".env" file with content:
			JWTSECRET=some-values
	"some-values" is arbitrary; besure to include ".env" in ".gitignore"

- in package.json, change
			"start:prod": "node server.js",
	to
			"start:prod": "node -r esm server.js",
	which allow the use of "esm", those weird arrow function

- don't delete "yarn.lock", this maybe the log to lock-in all version of
	npm used that work with the repo app; maybe this is equivalent to 
	package.lock.json

- errors in VSC terminal:
			Error: listen EADDRINUSE: address already in use :::3001
			Emitted 'error' event at:
			at process._tickCallback (internal/process/next_tick.js:63:19)
	these error may pertain to database connection config, which will be deat
	with in next task

----------------------------------------
==TASK-02==
observe if inputs store in database

- errors in VSC terminal:
			Error: listen EADDRINUSE: address already in use :::3001
			Emitted 'error' event at:
			at process._tickCallback (internal/process/next_tick.js:63:19)
	resolved:
	in server.js, changes
			const PORT = process.env.PORT || 3001;
	to "5000"; also do 5000 for 
			"proxy": "http://localhost:3001/",
	in file client/package.json

* CURRENTLY:
	- table (username, password, email, first_name, last_name) generated 
		when app ran
	TRY:
	- make a react components with inputs of those alias, then try to store
		it in database (authdemo); it seems like while storing those
		inputs gets the passwords salt'd in the process, per "User" model,
		models/user.js
	PROCESS:
	- created component "TestInputs" with necessary inputs
	- next:
		make a button toggler to show/hide between login/signup



----------------------------------------
==TASK-03==
deploying to heroku



----------------------------------------
==TASK-04==
start tying the components, maybe breakdown to more tasks



//=================================================================================
//=================================================================================
LOGIC ROUTES
